import 'core-js/modules/es6.function.name'
import 'core-js/modules/web.dom.iterable'
import { ApolloLink, Observable } from 'apollo-link'
import {
  selectURI,
  selectHttpOptionsAndBody,
  fallbackHttpConfig,
  serializeFetchParameter,
  createSignalIfSupported,
  parseAndCheckHttpResponse
} from 'apollo-link-http-common'
import extractFiles from 'extract-files'
export { ReactNativeFile } from 'extract-files'
export var createUploadLink = function createUploadLink() {
  var _ref =
      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$uri = _ref.uri,
    fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,
    _ref$fetch = _ref.fetch,
    linkFetch = _ref$fetch === void 0 ? fetch : _ref$fetch,
    fetchOptions = _ref.fetchOptions,
    credentials = _ref.credentials,
    headers = _ref.headers,
    includeExtensions = _ref.includeExtensions

  var linkConfig = {
    http: {
      includeExtensions: includeExtensions
    },
    options: fetchOptions,
    credentials: credentials,
    headers: headers
  }
  return new ApolloLink(function(operation) {
    var uri = selectURI(operation, fetchUri)
    var context = operation.getContext()
    var contextConfig = {
      http: context.http,
      options: context.fetchOptions,
      credentials: context.credentials,
      headers: context.headers
    }

    var _selectHttpOptionsAnd = selectHttpOptionsAndBody(
        operation,
        fallbackHttpConfig,
        linkConfig,
        contextConfig
      ),
      options = _selectHttpOptionsAnd.options,
      body = _selectHttpOptionsAnd.body

    var files = extractFiles(body)
    var payload = serializeFetchParameter(body, 'Payload')

    if (files.length) {
      delete options.headers['content-type']
      options.body = new FormData()
      options.body.append('operations', payload)
      options.body.append(
        'map',
        JSON.stringify(
          files.reduce(function(map, _ref2, index) {
            var path = _ref2.path
            map[''.concat(index)] = [path]
            return map
          }, {})
        )
      )
      files.forEach(function(_ref3, index) {
        var file = _ref3.file
        return options.body.append(index, file, file.name)
      })
    } else options.body = payload

    return new Observable(function(observer) {
      var _createSignalIfSuppor = createSignalIfSupported(),
        controller = _createSignalIfSuppor.controller,
        signal = _createSignalIfSuppor.signal

      if (controller) options.signal = signal
      linkFetch(uri, options)
        .then(function(response) {
          operation.setContext({
            response: response
          })
          return response
        })
        .then(parseAndCheckHttpResponse(operation))
        .then(function(result) {
          observer.next(result)
          observer.complete()
        })
        .catch(function(error) {
          if (error.name === 'AbortError') return
          if (error.result && error.result.errors && error.result.data)
            observer.next(error.result)
          observer.error(error)
        })
      return function() {
        if (controller) controller.abort()
      }
    })
  })
}
